import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  loading: true,
  postInfo: null,
  postLoad: false,
  getLoad: true,
  getFromDB: null,
  user: null,
};

export const postIndb = createAsyncThunk(
  'postInfo/postIndb',
  async (info) => {
    const response = await axios.post('http://localhost:5000/userPost', info)
    return response.data
  }
)
export const getFromDB = createAsyncThunk(
  'getFromDb/getFromDB',
  async (info) => {
    console.log('getting');
    const response = await axios.get(`http://localhost:5000/userPost/${info}`)
    return response.data
  }
)
export const updateLove = createAsyncThunk(
  'getFromDB/updateLove',
  async (info) => {
    console.log('update', info);
    if (info.type === 'put') {
      const response = await axios.put(`http://localhost:5000/userPost/love`, info)
      return response.data
    }
    else {
      const response = await axios.delete(`http://localhost:5000/userPost/love`, { data: info })
      return response.data
    }

  }
)

export const dataSlice = createSlice({
  name: 'data',
  initialState,
  reducers: {
    login: (state, action) => {
      state.user = action.payload
    },
    logout: (state, action) => {
      state.user = null
    },
    setLoading: (state, action) => {
      state.loading = action.payload;

    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(postIndb.pending, (state, action) => {
        // Add user to the state array
        console.log('pending');
        state.postLoad = true;
      })
      .addCase(postIndb.fulfilled, (state, action) => {
        // Add user to the state array
        console.log('done');
        state.postLoad = false;
        state.postInfo = action.payload;

      })
      .addCase(postIndb.rejected, (state, action) => {
        // Add user to the state array
        console.log('reject');
        state.postLoad = false;
        state.postInfo = false
      })
      .addCase(getFromDB.pending, (state, action) => {
        // Add user to the state array
        console.log('got the data');
        state.getLoad = true;;
      })
      .addCase(getFromDB.fulfilled, (state, action) => {
        // Add user to the state array
        console.log('got the data');
        state.getLoad = false;
        state.getFromDB = action.payload;
      })
      .addCase(getFromDB.rejected, (state, action) => {
        // Add user to the state array
        console.log('reject getting the data');
        state.getLoad = false;
        state.getFromDB = false;
      })
      .addCase(updateLove.fulfilled, (state, action) => {
        // Add user to the state array
        console.log('love the data');
      })
  },
});

export const { login, logout, setLoading } = dataSlice.actions;
export const selectData = (state) => state.data;


export default dataSlice.reducer;
